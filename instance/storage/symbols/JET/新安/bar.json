{
  "dataBindings": [
    {
      "attr": "background",
      "valueType": "Color"
    },
    {
      "attr": "textColor",
      "valueType": "Color",
      "defaultValue": "rgb(61,61,61)"
    },
    {
      "attr": "dataX",
      "valueType": "StringArray",
      "defaultValue": [
        "1XX",
        "2XX",
        "3XX",
        "4XX",
        "5XX",
        "6XX",
        "7XX",
        "8XX",
        "9XX"
      ]
    },
    {
      "attr": "dataY",
      "valueType": "ObjectArray",
      "defaultValue": [
        {
          "name": "s1",
          "data": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            1
          ]
        }
      ]
    },
    {
      "attr": "stack",
      "valueType": "Boolean",
      "defaultValue": false
    },
    {
      "attr": "query",
      "valueType": "Multiline"
    },
    {
      "attr": "update",
      "valueType": "Function",
      "defaultValue": "__ht__function update(data, valueObj) {\r\n    //此函数需要应用程序在收到后台查询结果后主动调用，并传入对应的参数\r\n    //data:当前关联的ht Data对象\r\n    //valueObj:后台根据当前对象自定义属性query的设置值的查询结果，类型为JSON\r\n    console.log(data);\r\n    console.log(valueObj);\r\n}"
    },
    {
      "attr": "theme",
      "valueType": "String",
      "defaultValue": "shine"
    },
    {
      "attr": "themes",
      "valueType": "StringArray",
      "defaultValue": [
        "default",
        "light",
        "dark",
        "vintage",
        "roma",
        "shine",
        "infographic",
        "macarons"
      ]
    },
    {
      "attr": "yAxisName",
      "valueType": "String"
    },
    {
      "attr": "barColorStart",
      "valueType": "Color",
      "defaultValue": "rgb(46,119,187)"
    },
    {
      "attr": "barColorEnd",
      "valueType": "Color",
      "defaultValue": "rgb(143,130,188)"
    },
    {
      "attr": "xAxisName",
      "valueType": "String",
      "defaultValue": "kW"
    }
  ],
  "snapshotURL": "symbols/JET/snapshot/snapshot_echarts-bar.json",
  "renderHTML": "__ht__function(data, gv, cache) {\r\n\r\n    var xxx = data.a('dataY');\r\n    var series = [];\r\n    if (xxx.length > 0) {\r\n        for (var i = 0; i < xxx.length; i++) {\r\n            var serie = {};\r\n            serie.name = xxx[i].name;\r\n            serie.type = 'bar';\r\n            serie.data = xxx[i].data;\r\n            serie.stack = data.a('stack')?'stack':null;\r\n            serie.barWidth = '6';\r\n            serie.itemStyle={\r\n                normal: {\r\n                    color: new echarts.graphic.LinearGradient(0, 0, 1, 0, [{\r\n                        offset: 0,\r\n                        color: data.a('barColorStart')\r\n                    }, {\r\n                        offset: 1,\r\n                        color: data.a('barColorEnd')\r\n                    }]),\r\n                     barBorderRadius: [0, 10, 10, 0]\r\n                }\r\n            };\r\n            series[i] = serie;\r\n        }\r\n    }\r\n\r\n    var option = {\r\n        color:['#33b9eb'],\r\n        backgroundColor: data.a('background'),\r\n        textStyle: {\r\n            color: data.a('textColor')\r\n        },\r\n        legend: {\r\n            top: 'bottom',\r\n            textStyle: {\r\n                color: data.a('textColor')\r\n            }\r\n        },\r\n        tooltip : {\r\n            trigger: 'axis',\r\n            axisPointer : {            // 坐标轴指示器，坐标轴触发有效\r\n                type : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'\r\n            }\r\n        },\r\n        grid: {\r\n            // left: '3%',\r\n            right: '13%',\r\n            bottom: '17%',\r\n            top: '5%'\r\n            // containLabel: true\r\n        },\r\n        xAxis : [\r\n            {\r\n                name: data.a('xAxisName')?data.a('xAxisName'):'kW',\r\n                type: 'value',\r\n                splitLine:{\r\n                    show:false\r\n                },\r\n                axisLine:{\r\n                    show:true,\r\n                    lineStyle:{\r\n                        color:'#44a8d0'\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        yAxis : [\r\n            {\r\n                type : 'category',\r\n                data : data.a('dataX'),\r\n                splitLine:{\r\n                    show:false\r\n                },\r\n                axisLine:{\r\n                    show:false\r\n                }\r\n            }\r\n        ],\r\n        series : series\r\n    };\r\n\r\n    if (!cache.htmlView) {\r\n        cache.htmlView = document.createElement('div');\r\n        cache.htmlView.style.position = 'absolute';\r\n        cache.htmlChart = echarts.init(cache.htmlView, data.a('theme'));\r\n\r\n        // layoutHTML will be called when the data needs to be drawing\r\n        cache.htmlView.layoutHTML = function () {\r\n            gv.layoutHTML(data, cache.htmlView, false);\r\n            cache.htmlChart.resize();\r\n        };\r\n    }\r\n\r\n    cache.htmlChart.setOption(option);\r\n\r\n    // html for showing\r\n    return cache.htmlView;\r\n}",
  "width": 400,
  "height": 200,
  "fitSize": true,
  "pixelPerfect": false,
  "comps": []
}