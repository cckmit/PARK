{
  "dataBindings": [
    {
      "attr": "textColor",
      "valueType": "Color",
      "defaultValue": "rgb(61,61,61)"
    },
    {
      "attr": "background",
      "valueType": "Color"
    },
    {
      "attr": "query",
      "valueType": "Multiline"
    },
    {
      "attr": "update",
      "valueType": "Function",
      "defaultValue": "__ht__function update(data, valueObj) {\r\n    //此函数需要应用程序在收到后台查询结果后主动调用，并传入对应的参数\r\n    //data:当前关联的ht Data对象\r\n    //valueObj:后台根据当前对象自定义属性query的设置值的查询结果，类型为JSON\r\n    console.log(data);\r\n    console.log(valueObj);\r\n}"
    },
    {
      "attr": "area",
      "valueType": "Boolean"
    },
    {
      "attr": "dataX",
      "valueType": "ObjectArray",
      "defaultValue": [
        {
          "name": "x1",
          "max": 6500
        },
        {
          "name": "x2",
          "max": 16000
        },
        {
          "name": "x3",
          "max": 30000
        },
        {
          "name": "x4",
          "max": 38000
        },
        {
          "name": "x5",
          "max": 52000
        },
        {
          "name": "x6",
          "max": 25000
        }
      ]
    },
    {
      "attr": "dataY",
      "valueType": "ObjectArray",
      "defaultValue": [
        {
          "name": "s1",
          "value": [
            4300,
            10000,
            28000,
            35000,
            50000,
            19000
          ]
        },
        {
          "name": "s2",
          "value": [
            5000,
            14000,
            28000,
            31000,
            42000,
            21000
          ]
        }
      ]
    },
    {
      "attr": "themes",
      "valueType": "StringArray",
      "defaultValue": [
        "default",
        "light",
        "dark",
        "vintage",
        "roma",
        "shine",
        "infographic",
        "macarons"
      ]
    },
    {
      "attr": "theme",
      "valueType": "String",
      "defaultValue": "shine"
    }
  ],
  "snapshotURL": "symbols/JET/snapshot/snapshot_echarts-radar.json",
  "renderHTML": "__ht__function(data, gv, cache) {\r\n\r\n    var option = {\r\n    // title: {\r\n    //     text: 'xxx'\r\n    // },\r\n    backgroundColor: data.a('background'),\r\n    textStyle: {\r\n        color: data.a('textColor')\r\n    },\r\n    tooltip: {\r\n    },\r\n    legend: {\r\n        type: 'scroll',\r\n        orient: 'vertical',\r\n        left: 'left',\r\n        textStyle: {\r\n            color: data.a('textColor')\r\n        }\r\n    },\r\n    radar: {\r\n        // shape: 'circle',\r\n        name: {\r\n            textStyle: {\r\n                color: '#fff',\r\n                backgroundColor: '#999',\r\n                borderRadius: 3,\r\n                padding: [3, 5]\r\n           }\r\n        },\r\n        indicator: data.a('dataX')\r\n    },\r\n    series: [{\r\n        name: '',\r\n        type: 'radar',\r\n        areaStyle: data.a('area') ? {} : null,\r\n        data : data.a('dataY')\r\n    }]\r\n};\r\n\r\n    if (!cache.htmlView) {\r\n        cache.htmlView = document.createElement('div');\r\n        cache.htmlView.style.position = 'absolute';\r\n        cache.htmlChart = echarts.init(cache.htmlView, data.a('theme'));\r\n\r\n        // layoutHTML will be called when the data needs to be drawing\r\n        cache.htmlView.layoutHTML = function () {\r\n            gv.layoutHTML(data, cache.htmlView, false);\r\n            cache.htmlChart.resize();\r\n        };\r\n    }\r\n\r\n    cache.htmlChart.setOption(option);\r\n\r\n    // html for showing\r\n    return cache.htmlView;\r\n}",
  "width": 400,
  "height": 350,
  "fitSize": true,
  "pixelPerfect": false,
  "comps": []
}